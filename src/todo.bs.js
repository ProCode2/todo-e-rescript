// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Os = require("os");
var Curry = require("bs-platform/lib/js/curry.js");
var Belt_Int = require("bs-platform/lib/js/belt_Int.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");

var getToday = (function() {
  let date = new Date();
  return date.toISOString().slice(0, 10);
});

var encoding = "utf8";

var pending_todos_file = process.cwd() + "/todo.txt";

var completed_todos_file = process.cwd() + "/done.txt";

var help_text = "Usage :-\n$ ./todo add \"todo item\"  # Add a new todo\n$ ./todo ls               # Show remaining todos\n$ ./todo del NUMBER       # Delete a todo\n$ ./todo done NUMBER      # Complete a todo\n$ ./todo help             # Show usage\n$ ./todo report           # Statistics";

function parseCommand(cmnd, arg) {
  var cmnd$1 = cmnd.trim().toLocaleLowerCase();
  var pos = Belt_Option.flatMap(arg, Belt_Int.fromString);
  switch (cmnd$1) {
    case "add" :
        return {
                TAG: /* Add */0,
                _0: arg
              };
    case "del" :
        return {
                TAG: /* Del */1,
                _0: pos
              };
    case "done" :
        return {
                TAG: /* Done */2,
                _0: pos
              };
    case "help" :
        return /* Help */0;
    case "ls" :
        return /* Ls */1;
    case "report" :
        return /* Report */2;
    default:
      return /* Help */0;
  }
}

function readFile(filename) {
  if (!Fs.existsSync(filename)) {
    return [];
  }
  var text = Fs.readFileSync(filename, {
        encoding: encoding,
        flag: "r"
      });
  var lines = text.split(Os.EOL);
  return lines.filter(function (todo) {
              return todo !== "";
            });
}

function writeFile(filename, lines) {
  if (lines.length === 1) {
    var text = Caml_array.get(lines, 0) + Os.EOL;
    Fs.writeFileSync(filename, text, {
          encoding: encoding,
          flag: "w"
        });
    return ;
  }
  var text$1 = Belt_Array.joinWith(lines, Os.EOL, (function (x) {
          return x;
        }));
  Fs.writeFileSync(filename, text$1, {
        encoding: encoding,
        flag: "w"
      });
  
}

function appendFile(filename, content) {
  Fs.appendFileSync(filename, content + Os.EOL, {
        encoding: encoding,
        flag: "a"
      });
  
}

function updateFile(filename, updateFn) {
  var todos = readFile(filename);
  var new_todos = Curry._1(updateFn, todos);
  return writeFile(pending_todos_file, new_todos);
}

function printHelp(param) {
  console.log(help_text);
  
}

function showRemainingTodos(param) {
  var todos = readFile(pending_todos_file);
  if (todos.length === 0) {
    console.log("There are no pending todos!");
  } else {
    console.log(Belt_Array.reduceWithIndex(Belt_Array.reverse(todos), "", (function (acc, todo, index) {
                return acc + ("[" + String(todos.length - index | 0) + "] " + todo + Os.EOL);
              })));
  }
  
}

function addTodo(todo) {
  if (todo !== undefined) {
    appendFile(pending_todos_file, todo);
    console.log("Added todo: \"" + todo + "\"");
  } else {
    console.log("Error: Missing todo string. Nothing added!");
  }
  
}

function delTodo(arg) {
  if (arg !== undefined) {
    if (Fs.existsSync(pending_todos_file)) {
      return updateFile(pending_todos_file, (function (todos) {
                    if (arg < 1 || arg > todos.length) {
                      console.log("Error: todo #" + String(arg) + " does not exist. Nothing deleted.");
                      return todos;
                    }
                    var todos$1 = todos.filter(function (param, index) {
                          return (index + 1 | 0) !== arg;
                        });
                    console.log("Deleted todo #" + String(arg));
                    return todos$1;
                  }));
    } else {
      return ;
    }
  } else {
    console.log("Error: Missing NUMBER for deleting todo.");
    return ;
  }
}

function markDone(arg) {
  if (arg !== undefined) {
    var todos = readFile(pending_todos_file);
    if (arg < 1 || arg > todos.length) {
      console.log("Error: todo #" + String(arg) + " does not exist. Nothing Marked as done.");
      return ;
    }
    var completedTodo = Caml_array.get(todos, arg - 1 | 0);
    var todos$1 = todos.filter(function (param, index) {
          return index !== (arg - 1 | 0);
        });
    writeFile(pending_todos_file, todos$1);
    appendFile(completed_todos_file, "x " + Curry._1(getToday, undefined) + " " + completedTodo);
    console.log("Marked todo #" + String(arg) + " as done.");
    return ;
  }
  console.log("Error: Missing NUMBER for marking todo as done.");
  
}

function reportOfTodos(param) {
  var pendingTodos = readFile(pending_todos_file).length;
  var completedTodos = readFile(completed_todos_file).length;
  console.log(Curry._1(getToday, undefined) + " Pending : " + String(pendingTodos) + " Completed : " + String(completedTodos));
  
}

var cmnd = Belt_Option.getWithDefault(Belt_Array.get(process.argv, 2), "help");

var cmdArg = Belt_Array.get(process.argv, 3);

var cmnd$1 = parseCommand(cmnd, cmdArg);

if (typeof cmnd$1 === "number") {
  switch (cmnd$1) {
    case /* Help */0 :
        console.log(help_text);
        break;
    case /* Ls */1 :
        showRemainingTodos(undefined);
        break;
    case /* Report */2 :
        reportOfTodos(undefined);
        break;
    
  }
} else {
  switch (cmnd$1.TAG | 0) {
    case /* Add */0 :
        addTodo(cmnd$1._0);
        break;
    case /* Del */1 :
        delTodo(cmnd$1._0);
        break;
    case /* Done */2 :
        markDone(cmnd$1._0);
        break;
    
  }
}

exports.getToday = getToday;
exports.encoding = encoding;
exports.pending_todos_file = pending_todos_file;
exports.completed_todos_file = completed_todos_file;
exports.help_text = help_text;
exports.parseCommand = parseCommand;
exports.readFile = readFile;
exports.writeFile = writeFile;
exports.appendFile = appendFile;
exports.updateFile = updateFile;
exports.printHelp = printHelp;
exports.showRemainingTodos = showRemainingTodos;
exports.addTodo = addTodo;
exports.delTodo = delTodo;
exports.markDone = markDone;
exports.reportOfTodos = reportOfTodos;
exports.cmdArg = cmdArg;
exports.cmnd = cmnd$1;
/* pending_todos_file Not a pure module */
